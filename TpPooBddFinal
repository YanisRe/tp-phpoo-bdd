<?php
include "config.php";
function chargementBase(){
    try {
        //Informations pour se connecter à la base de données
        global $DB_HOST;
        global $DB_USER;
        global $DB_MDP;
        global $DB_NomBase;
        $hote = $DB_HOST;
        $utilisateur = $DB_USER;
        $motDePasse = $DB_MDP;
        $nomDeLaBase = $DB_NomBase;
        //Tentative de connexion à la base de données
        $connexion = new PDO("mysql:host=$hote;dbname=$nomDeLaBase", $utilisateur, $motDePasse);
        $connexion->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return $connexion;
    } catch (PDOException $e) {
        // Si il y a une erreur de connexion on affiche le message d'erreur et on arrête le script
        echo "Erreur de connexion à la base de données: " . $e->getMessage();
        die();
    }
}
class Personnage{
    //On met en privé pour des raisons de sécurité
    private $nom;
    private $PV;
    private $PVMax;
    private $PA;
    private $PD;
    private $level=1;
    private $experience=0;
    private $competence;
    private $arme;
    private $argent=100;

    public function __construct($n,$pv,$pa,$pd,$c,$a){
        $this->nom = $n;
        $this->PV= $pv;
        $this->PVMax= $pv;
        $this->PA= $pa;
        $this->PD= $pd;
        $this->competence= $c;
        $this->arme=$a;
    }

    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }
    public function getPVMax(){
        return $this->PVMax;
    }

    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getlevel(){
        return $this->level;
    }

    public function getexperience(){
        return $this->experience;
    }

    public function getcompetence(){
        return $this->competence;
    }
    public function getarme(){
        return $this->arme;
    }
    public function getargent(){
        return $this->argent;
    }
}


class Salle {
    //cette class permet de créer les salles et de passer à la salle suivante
    protected $typeSalle;
    protected $longueur;
    protected $largeur;
    protected function __construct($t,$lon,$lar){
        $this->typeSalle=$t;
        $this->longueur=$lon;
        $this->largeur=$lar;
    }
}
//cette class permet de créer les salles pièges
class Piege extends Salle{
    private $degats;

    public function __construct($lon,$lar,$d){
        parent::__construct("Piège",$lon,$lar);
        $this->degats=$d;
    }

    public function Lancement($Personnage){
        $defence=$Personnage["PD"];
        $Personnage["PV"]= $Personnage["PV"]- round($this->degats/(round($defence/10)+1));
        apparaitreprogressivement("Vous marchez sur un piège et vous subissez ".round($this->degats/round($defence/10)+1)." de dégats.\n",30000);
    }

    public function gettype(){
        return $this->typeSalle;
    }
    public function getlongeur(){
        return $this->longueur;
    }
    public function getlargeur(){
        return $this->largeur;
    }
    public function getdegats(){
        return $this->degats;
    }
}
//cette class permet de créer les salles marchand
class Marchand extends Salle{
    private $objet;
    private $inventaire;
    private $marchandtrouver=false;


    public function __construct($lon,$lar,$o){
        parent::__construct("Marchand",$lon,$lar);
        $this->objet=$o;
    }

    

    public function gettype(){
        return $this->typeSalle;
    }
    public function getlongeur(){
        return $this->longueur;
    }
    public function getlargeur(){
        return $this->largeur;
    }
    public function getobjet(){
        return $this->objet;
    }
    //cette fonction permet de faire apparaitre le marchand
    public function Lancement($Personnage,$inventaire,$objets) {
        apparaitreprogressivement("Vous avez trouvé un marchand !\n", 30000);
        sleep(2);
        while(true){
            
            popen('cls', 'w');
            apparaitreprogressivement("Que souhaitez-vous faire ?\n", 30000);
            apparaitreprogressivement("1-Acheter\n", 10000);
            apparaitreprogressivement("2-Vendre\n", 10000);
            apparaitreprogressivement("3-Continuer son chemin\n", 10000);
            apparaitreprogressivement("Choix:", 10000);
            $choixMarchand = readline();
            popen('cls', 'w');
            if ($choixMarchand == 1) {
                apparaitreprogressivement("Que souhaitez-vous acheter ?\n", 30000);
    
                // Propose 3 objets aléatoires à acheter
                $objetsAleatoires = $this->getObjetsAleatoires($objets,3);
                foreach ($objetsAleatoires as $index => $item) {
                    apparaitreprogressivement(($index + 1) . "-" . $item->getnom() . "\n", 10000);
                }
            } 
            elseif ($choixMarchand == 2) {
                apparaitreprogressivement( "Quel item souhaitez-vous vendre ?\n",30000);
                listerInventaire($inventaire);
                apparaitreprogressivement( "Choix:",30000);
                $choixVente = readline();
                foreach ($inventaire as $item) {
                    if ($item["nom"] == $choixVente) {
                        $requete = chargementBase()->prepare("DELETE FROM inventaire WHERE nom=?");
                        $requete->execute([$choixVente]);
                        apparaitreprogressivement("Vous avez vendu " . $choixVente . "\n", 30000);
                        sleep(2);
                        $argent = $Personnage["Argent"] + $item["prix"];
                        $item["prix"] = $item["PA"] / 2;
                        $requete = chargementBase()->prepare("UPDATE sauvegarde SET Argent=? WHERE ID=?");
                        popen('cls', 'w');
                        apparaitreprogressivement("Vous avez gagné " . $item["prix"] . " argent!\n", 30000);
                        sleep(2);
                    }
                }
            }
            elseif ($choixMarchand == 3) {
                apparaitreprogressivement("Vous décidez de ne pas faire affaire avec le marchand.\n", 30000);
                sleep(2);
                popen('cls', 'w');
                break;
            }
            else {
                apparaitreprogressivement("Je n'ai pas compris votre demande.\n", 30000);
                sleep(2);
                popen('cls', 'w');
            }
        }
    }
    public function acheterObjet($joueur, $objet) {
        // Supposez que le prix de base soit de 10, et chaque point de dégât coûte 5
        $prixBase = 10;
        $prixTotal = $prixBase + ($objet->getDegats() * 5);
    
        // Code pour vérifier si le joueur a suffisamment d'argent pour acheter l'objet
        if ($joueur->getArgent() >= $prixTotal) {
            // Le joueur peut acheter l'objet
            $joueur->retirerArgent($prixTotal); // Méthode à implémenter pour retirer l'argent du joueur
            $joueur->ajouterObjet($objet); // Méthode à implémenter pour ajouter l'objet au joueur
            echo "Objet acheté avec succès !";
        } else {
            // Le joueur n'a pas assez d'argent
            echo "Vous n'avez pas assez d'argent pour acheter cet objet.";
        }
    }   
    private function getObjetsAleatoires($Objets,$nombre) {
        $objetsAleatoires = array();

        // Mélanger les objets disponibles
        shuffle($Objets);

        // Sélectionner les premiers $nombre objets
        for ($i = 0; $i < $nombre; $i++) {
            $objetsAleatoires[] = $Objets[$i];
        }

        return $objetsAleatoires;
    }

}
//cette class permet de créer les salles repos et de récupérer toute la vie du personnage
class Repos extends Salle{
    private $camps;

    public function __construct($lon,$lar,$c){
        parent::__construct("Repos",$lon,$lar);
        $this->camps=$c;
    }

    public function __get($camps){
        return $this->camps;
    }

    //cette fonction permet de récupérer toute la vie du personnage
    public function Lancement($personnage) {
        $personnage["PV"]=$personnage["PVMAX"];
        apparaitreprogressivement("Vous vous reposez et récupérez toute votre vie.\n", 30000);
        sleep(1);
    }
}
//cette class permet de créer les salles monstres
Class SalleMonstre extends Salle{
    private $enemies;

    public function __construct($t, $lon, $lar, $enemies) {
        parent::__construct($t, $lon, $lar);
        $this->enemies = $enemies;
    }

    // Cette fonction permet de rencontrer un ennemi aléatoire
    public function Lancement($personnage,$PositionSalle) {
        $randomEnemy = $this->enemies[random_int(0,min(round($PositionSalle/5),4))]; // Sélection aléatoire d'un monstre à affronter
        apparaitreprogressivement("Vous rencontrez un ennemi : " . $randomEnemy->getnom() . "\n", 30000);
        sleep(1);

        // Lancement du combat
        combat($personnage, $randomEnemy);
    }
}
//cette class permet de créer les salles coffres
class Coffre extends Salle{
    private $objets;

    public function __construct($t, $lon, $lar, $objets) {
        parent::__construct($t, $lon, $lar);
        $this->objets = $objets;
    }

    // Methode pour ouvrir un coffre	
    public function Lancement($personnage) {
        apparaitreprogressivement("Vous trouvez un coffre dans la salle.\n", 30000);
        apparaitreprogressivement("Voulez-vous l'ouvrir ? (1-oui / 2-non)\n", 10000);

        $choix = readline();
        popen('cls','w');

        if ($choix == 1) {
            apparaitreprogressivement("Vous ouvrez le coffre...\n", 30000);
            sleep(1);
            
            // taux de chance de rencontrer un Mimic
            if (random_int(1, 10) == 1) {
                $this->rencontrerMimic($personnage);
            } 
            else {
                // Ca permet de récupérer un objet aléatoire dans la liste des objets
                $nouvelObjet = $this->objets[array_rand($this->objets)];
                
                $requete = chargementBase()->prepare("UPDATE nom (ID, nom) VALUES (?, ?)");
                $requete->execute([$personnage["ID"], $nouvelObjet["nom"]]);

                // Ca permet de récupérer les statistiques de l'objet
                apparaitreprogressivement("Vous avez trouvé un nouvel objet : " . $nouvelObjet->getnom() . "\n", 30000);
                sleep(1);

                
            }
        } else {
            apparaitreprogressivement("Vous décidez de ne pas ouvrir le coffre.\n", 30000);
            sleep(1);
        }
    }

    // Methode pour rencontrer un Mimic
    private function rencontrerMimic($personnage) {
        $mimic = new MonstreSpécial("Mimic", 250, 25, 50, 2500, ["épée en obsidienne à deux mains", 50, 20], "langue", ["Glouton", 1.5]);
        apparaitreprogressivement("Le coffre se transforme en Mimic ! Préparez-vous au combat.\n", 30000);
        sleep(2);

        // Lance le combat
        combat($personnage, $mimic);
    }
}

class monstre {
    //On met en private pour raison de sécurité
    protected $nom;
    protected $PV;
    protected $PVMax;
    protected $PA;
    protected $PD;
    protected $XPgagner;
    protected $drop;
    
    //On crée le constructeur
    public function __construct($n,$pv,$pa,$pd,$xp,$d){
        $this->nom = $n;
        $this->PV= $pv;
        $this->PVMax= $pv;
        $this->PA= $pa;
        $this->PD= $pd;
        $this->XPgagner= $xp;
        $this->drop=$d;
    }
    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }
    public function getPVMax(){
        return $this->PVMax;
    }
    
    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getXPgagner(){
        return $this->XPgagner;
    }

    public function getdrop(){
        return $this->drop;
    }

    public function prendredegats($degat){
        $this->PV= $this->PV-$degat;
    }

    public function seDefend(){
        $this->PD= $this->PD*2;
    }
    public function neSeDefendPas(){
        $this->PD= $this->PD/2;
    }
}

class MonstreSpécial extends Monstre {
    //On crée les monstres spéciaux avec leurs attributs
    private $arme;
    private $competence;

    public function __construct($n, $pv, $pa, $pd, $xp, $d, $a, $c){
        parent::__construct($n, $pv, $pa, $pd, $xp, $d);
        $this->arme=$a;
        $this->competence=$c;
    }
    public function getnom(){
        return $this->nom;
    }

    public function getPV(){
        return $this->PV;
    }
    public function getPVMax(){
        return $this->PVMax;
    }
    
    public function getPA(){
        return $this->PA;
    }

    public function getPD(){
        return $this->PD;
    }

    public function getXPgagner(){
        return $this->XPgagner;
    }

    public function getdrop(){
        return $this->drop;
    }
    
    public function prendredegats($degat){
        $this->PV= $this->PV-$degat;
    }
}

class Objets{
    private $nom;
    private $type;
    private $statistique;

    public function __construct($n,$t,$s){
        $this->nom=$n;
        $this->type=$t;
        $this->statistique=$s;
    }

    public function getnom(){
        return $this->nom;
    }
    public function gettype(){
        return $this->type;
    }
    public function getstatistique(){
        return $this->statistique;
    }
}
//cette commande permet de faire apparaitre le texte progressivement
function apparaitreprogressivement($texte,$temps){
    for ($i = 0; $i < strlen($texte); $i++) {
        echo $texte[$i];
        usleep($temps);
    }
}
//cette commande permet calculer les dégats des monstre
function MonstreAttaque($monstre, $personnage) {
    $degat=$monstre->getPA();
    $defence=$personnage["PD"];
    $personnage["PV"]= $personnage["PV"]- round($degat/(round($defence/10)+1));
    apparaitreprogressivement($monstre->getnom()." vous attaque et vous subissez ".round($degat/(round($defence/10)+1))." de dégats.\n",3000);
    sleep(1);
    return $personnage["PV"];
} 
//cette commande permet de calculer les dégats du personnage
function PersonnageAttaque($Personnage, $monstre) {
    $degat=$Personnage["PA"];
    $defence=$monstre->getPD();
    $monstre->prendredegats(round($degat/(round($defence/10)+1)));
    apparaitreprogressivement("Vous attaquez et vous infligez ".round($degat/(round($defence/10)+1))." de dégats.\n",30000);
    sleep(1);
}
//cette commande permet de faire apparaitre les statistiques du monstre
function afficherStatsmonstre($monstre){
    apparaitreprogressivement("Voici les statistique de :". $monstre->getnom() ."\n",30000);
    apparaitreprogressivement("PV :". $monstre->getPV() ."/". $monstre->getPVMax() ."\n",10000);
    apparaitreprogressivement("Attaque :". $monstre->getPA() ."\n",10000);
    apparaitreprogressivement("Defence :". $monstre->getPD() ."\n",10000);
}
//cette commande permet de faire apparaitre les statistiques du personnage
function afficherStatsPersonnage($Personnage){
    apparaitreprogressivement("Voici les statistique de :". $Personnage["nom"] ."\n",30000);
    apparaitreprogressivement("PV :". $Personnage["PV"] ."/". $Personnage["PVMAX"] ."\n",10000);
    apparaitreprogressivement("Attaque :". $Personnage["PA"] ."\n",10000);
    apparaitreprogressivement("Defence :". $Personnage["PD"] ."\n",10000);
}
//cette commande permet de lancer le combat
function combat($Personnage, $Ennemie){
    apparaitreprogressivement("Vous entrez en combat.\n", 30000);
    sleep(2);
    // Boucle de combat
    while(true){
        popen('cls','w');
        $sedefend=false;
        $sedefendEnemy=false;
        afficherStatsPersonnage($Personnage);
        afficherStatsmonstre($Ennemie);
        apparaitreprogressivement("Que souhaitez-vous faire ?\n", 30000);
        apparaitreprogressivement("1-Attaquer\n", 10000);
        apparaitreprogressivement("2-Se défendre\n", 10000);
        apparaitreprogressivement("Choix:",10000);
        $choix = readline();
        popen('cls','w');
        $choixEnemy= random_int(1,10);
        // Choix aléatoire de l'ennemi
        if($choix==2){
            $Personnage["PD"]= $Personnage["PD"] *2;
            $sedefend=true;
            apparaitreprogressivement("Vous vous défendez !\n", 30000);
            sleep(1);
        }
        // Choix aléatoire de l'ennemi si il attaque defend ou ne fait rien
        if($choixEnemy>4 && $choixEnemy<=8){
            $Ennemie->seDefend();
            $sedefendEnemy=true;
            apparaitreprogressivement("L'ennemi se défend.\n",30000);
            sleep(1);
        }
        // Choix du joueur
        if ($choix == 1) {
            PersonnageAttaque($Personnage, $Ennemie);
        }
        else if($choix==!2){
            apparaitreprogressivement("vous n'arrivez pas à choisir, vous passez donc votre tour.\n", 30000);
            sleep(1);
        }
        // Choix de l'ennemi
        if($choixEnemy<=4){
            $Personnage["PV"]=MonstreAttaque($Ennemie,$Personnage);
        }
        else if($choixEnemy>8){
            apparaitreprogressivement("Le monstre vous regarde fixement.",30000);
            sleep(1);
        }
        // Vérification de la vie du personnage et du monstre
        if ($Personnage["PV"] <= 0) {
            apparaitreprogressivement("Vous avez été vaincu !\n", 30000);
            die();
        } elseif ($Ennemie->getPV() <= 0) {
            apparaitreprogressivement("Vous avez vaincu le monstre !\n Vous gagné ".$Ennemie->getXPgagner()." expèrience et 50 Gold.", 30000);
            $Personnage["Exp"]= $Personnage["Exp"] + $Ennemie->getXPgagner();
            if ($Personnage["Exp"] >= $Personnage["Niveau"]*100){
                Monterniveau($Personnage);
            }
            $Personnage["Argent"]= $Personnage["Argent"] + 50;
            break;
        }
        if ($sedefend){
            $Personnage["PD"]= $Personnage["PD"] /2;
        }
        if ($sedefendEnemy){
            $Ennemie->neSeDefendPas();
        }
    }
}
//cette fonction permet de crée les salles
function ApparitionSalle($Salle,$numero){
    $long=$Salle->getlongeur();
    $lar=$Salle->getlargeur();
    apparaitreprogressivement("Vous entrez dans la salle ".$numero.".\n",30000);
    apparaitreprogressivement(str_repeat("=",$long)."\n",5000);
    for ($i=0; $i < $lar-2; $i++) { 
            apparaitreprogressivement("|",5000);
            apparaitreprogressivement(str_repeat(" ",$long-2),5000);
            apparaitreprogressivement("|"."\n",5000);
    }
    apparaitreprogressivement(str_repeat("=",$long)."\n",5000);
}
//cette fonction permet de monter de niveau
function Monterniveau($Personnage){
    apparaitreprogressivement("Vous montez de niveau, vous pouvez donc mettre 3 points de stats.\n",30000);
    $Personnage["Exp"]= $Personnage["Exp"] - $Personnage["Niveau"]*100;
    $Personnage["Niveau"]= $Personnage["Niveau"]+1;
    sleep(2);
    popen('cls','w');
    $PointsStats=5;
    //boucle pour mettre les points de stats
    while($PointsStats!=0){
        popen('cls','w');
        apparaitreprogressivement("Point de stats restant :".$PointsStats."\n",30000);
        apparaitreprogressivement("1-PV:".$Personnage["PV"]."/".$Personnage["PVMAX"]." +10\n",10000);
        apparaitreprogressivement("2-Points d'attaque:". $Personnage["PA"] ." +1\n",10000);
        apparaitreprogressivement("3-Points deffence:". $Personnage["PD"] ." +1\n",10000);
        apparaitreprogressivement("Choix :",30000);
        $choix=readline();
        //choix du joueur
        if($choix==1){
            $PointsStats= $PointsStats-1;
            $Personnage["PVMAX"]= $Personnage["PVMAX"]+10;
            $Personnage["PV"]= $Personnage["PV"]+10;
            apparaitreprogressivement("PV augmenté de 10.",30000);
            sleep(2);
        }
        else if($choix==2){
            $PointsStats= $PointsStats-1;
            $Personnage["PA"]= $Personnage["PA"] +1;
            apparaitreprogressivement("PV augmenté de 10.",30000);
            sleep(2);
        }
        else if($choix==3){
            $PointsStats= $PointsStats-1;
            $Personnage["PD"]= $Personnage["PD"] +1;
            apparaitreprogressivement("PV augmenté de 10.",30000);
            sleep(2);
        }
        else{
            apparaitreprogressivement("Je n'ai pas compris.",30000);
            sleep(2);
        }
    }
}
//cette fonction permet de sauvegarder la partie
function Sauvegarde($Personnage){
    $requete = chargementBase()->prepare("UPDATE sauvegarde SET PV =?, PVMAX =?, PA =?, PD =?, Niveau =?, Exp =?, Salle =?, Argent= ? WHERE ID= ?");
    $requete->execute([$Personnage["PV"],$Personnage["PVMAX"],$Personnage["PA"],$Personnage["PD"],$Personnage->getlevel(), $Personnage->getexperience(),$Personnage->getSalle(),$Personnage["Argent"],$Personnage["ID"]]);
}
//cette fonction peremt de faire un choix apres avoir fini une salle
function finSalle($Personnage){
    while(true){
        popen('cls','w');
        apparaitreprogressivement("Que shouaitez vous faire :\n",30000);
        apparaitreprogressivement("1-Continuer\n2-Gerer Inventaire\n3-Sauvegarder\n4-Quitter\nChoix:",10000);
        $choix=readline();
        if($choix==1){
            break;
        }
        else if($choix==2){
            popen('cls','w');
            listerinventaire($Personnage);
            apparaitreprogressivement("Que souhaitez-vous faire :\n",30000);
            apparaitreprogressivement("1-Jeter\n2-Quitter\nChoix:",10000);
            while($choix!=1 || $choix!=2){
                $choix=readline();
            }
            if($choix==1){
                jeterItem($Personnage);
            }
            else if($choix==2){
                break;
            }
            else{
                apparaitreprogressivement("Je n'ai pas compris votre demande.\n",30000);
                sleep(2);
            }
            
        }
        else if($choix==3){
            Sauvegarde($Personnage);
            apparaitreprogressivement("Sauvegarde effectué.",30000);
            sleep(2);
        }
        else if($choix==4){
            apparaitreprogressivement("Au revoir jeune aventurier, on espère te revoir bientôt !\n",30000);
            sleep(2);
            popen('cls','w');
            die();
        }
    }
}
//cette fonction permet de jeter un item
function jeterItem($inventaire){
    apparaitreprogressivement("Quel item souhaitez-vous jeter ?\n",30000);
    listerInventaire($inventaire);
    apparaitreprogressivement("Choix:",30000);
    $choixJeter=readline();
    foreach($inventaire as $item){
        if($item["nom"]==$choixJeter){
            $requete = chargementBase()->prepare("DELETE FROM inventaire WHERE nom=?");
            $requete->execute([$choixJeter]);
            apparaitreprogressivement("Vous avez jeté ".$choixJeter."\n",30000);
            sleep(2);
            popen('cls','w');
            break;
        }
    }
}
//cette fonction permet de lister l'inventaire
function listerInventaire($inventaire){
    apparaitreprogressivement("Votre inventaire contient actuellement :\n",30000);
    foreach($inventaire as $item){
        apparaitreprogressivement($item["nom"]."\n",30000);
    }
}
//ces lignes de codes permettent de créer les objets, les monstres et les salles
$Objets=[new Objets("épée en fer", "arme", ["dégats"=>6]), new Objets("masse d'arme", "arme", ["dégats"=>9]), new Objets("lance d'os", "arme", ["dégats"=>12]), new Objets("espadon", "arme", ["dégats"=>18]), new Objets("baton", "arme", ["dégats"=>900]), new Objets("halbarde", "arme", ["dégats"=>20]), new Objets("hache à deux mains", "arme", ["dégats"=>25]), new Objets("lame divin des dieux", "arme", ["dégats"=>1]), new Objets("faussoyeur des mondes", "arme", ["dégats"=>50]), new Objets("trinitées", "arme", ["dégats"=>40]), new Objets("brise coque", "arme", ["dégats"=>60]), new Objets("dague du roi déchue", "arme", ["dégats"=>55])];
$Ennemies=[new monstre("squelette", 90, 8, 5, 20,[]), new monstre("zombie", 120, 15, 8, 25,[]), new monstre("gobelin slayer", 70, 30, 10, 50,[]), new monstre("orc", 160, 50, 20, 100,[]), new monstre("démon", 200, 60, 30, 300,[])];
$Enemiesspeciaux=[new MonstreSpécial("Mimic",250,25,50,2500,["épée en obsidienne à deux mains",50,20],"langue",["Glouton",1.5]), new MonstreSpécial("Dragon",500,100,100,5000,["Espadon des dieux",90,18],"Lance-flammes",["Souffle de feu",2]), new MonstreSpécial("Golem",1000,200,200,10000,["Marteau de guerre",150,30],"Poing de pierre",["Poing de pierre",3])];
$SallesMonstre= [new SalleMonstre("Monstre",20,12,$Ennemies),new SalleMonstre("Monstre",16,18,$Ennemies)];
$SalleCoffre= [new Coffre("Coffre",26,12,$Objets),new Coffre("Coffre",22,11,$Objets)];
$SallesMarchand= [new Marchand(16,22,$Objets), new Marchand(17,20,$Objets)];
$SallesPiege= [new Piege(20,12,15),new Piege(13,9,20)];
//lancement du jeu
popen('cls','w');
apparaitreprogressivement("Bienvenue à toi jeune aventurier !", 30000);
sleep(2);
while(true){
    popen('cls','w');
    apparaitreprogressivement("Que souhaitez-vous faire:\n",30000);
    apparaitreprogressivement("1-Continuer\n2-Nouvelle partie\n3-Quitter\n",10000);
    apparaitreprogressivement("Choix:",10000);
    $choix=readline();
    popen('cls','w');
    if($choix==1){
        $requete = chargementBase()->query("SELECT * FROM Sauvegarde");
        $Personnage= $requete->fetchall();
        apparaitreprogressivement("Voici les sauvegardes: \n",30000);
        foreach($Personnage as $Chargement){
            if($Chargement["nom"]==NULL){
                apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": Vide\n",10000);
            }
            else{
                apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": ".$Chargement["nom"]."\n",10000);
            }
        }
        apparaitreprogressivement("Choix:",10000);
        $choix=readline();
        popen('cls','w');
        if($choix==1 || $choix==2 || $choix ==3){
            $requete = chargementBase()->prepare("SELECT * FROM Sauvegarde WHERE ID=?");
            $requete->execute([$choix]);
            $Personnage= $requete->fetch();
            $requete = chargementBase()->prepare("SELECT * FROM Arme WHERE IDSauvegarde=?");
            $requete->execute([$choix]);
            $arme= $requete->fetch();
            $requete = chargementBase()->prepare("SELECT * FROM inventaire WHERE IDSauvegarde=?");
            $requete->execute([$choix]);
            $InvtairePerso=$requete->fetchAll();
            while (true){
                if($Personnage["nom"]==NULL){
                    //on vérifie si la sauvegarde est vide
                    apparaitreprogressivement("Sauvegarde vide.\n",10000);
                    sleep(2);
                    break;
                }
                else{
                    // Sélection aléatoire d'un monstre à affronter
                    apparaitreprogressivement("Vous vous trouvez dans la salle ". $Personnage["Salle"] .".",30000);
                    sleep(2);
                    popen('cls','w');
                    //Choisis une type de salle aléatoirement.
                    $typeSalle=random_int(1,20);
                    if($typeSalle<=15){
                        $PositionSalle=$SallesMonstre[random_int(0,count($SallesMonstre)-1)];
                        $PositionSalle->Lancement($Personnage,$Personnage["Salle"]);
                        finSalle($Personnage);
                    }
                    else if($typeSalle==16){
                        $PositionSalle=$SallesMarchand[random_int(0,count($SallesMonstre)-1)];
                        $PositionSalle->Lancement($Personnage,$InvtairePerso,$objects);
                        finSalle($Personnage);
                    }
                    else if($typeSalle==17){
                        $PositionSalle=$SallesPiege[random_int(0,count($SallesMonstre)-1)];
                        $PositionSalle->Lancement($Personnage);
                        finSalle($Personnage);
                    }
                    else if($typeSalle==18){
                        $PositionSalle=$SalleCoffre[random_int(0,count($SallesMonstre)-1)];
                        $PositionSalle->Lancement($Personnage);
                        finSalle($Personnage);
                    }
                    else if($typeSalle>18){
                        $PositionSalle=$SallesRepos[random_int(0,count($SallesMonstre)-1)];
                        $PositionSalle->Lancement($Personnage);
                        finSalle($Personnage);
                    }
                }
            }
            
        }
        else{
            apparaitreprogressivement("Je n'ai pas compris votre demande \n",30000);
            sleep(2);
        }        
    }
    else if($choix==2){
        $requete = chargementBase()->query("SELECT * FROM Sauvegarde");
        $Personnage= $requete->fetchall();
        apparaitreprogressivement("Choissisez la sauvegarde:\n",30000);
        foreach($Personnage as $Chargement){
            if($Chargement["nom"]==NULL){
                apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": Vide\n",10000);
            }
            else{
                apparaitreprogressivement("Sauvegarde ".$Chargement["ID"].": ".$Chargement["nom"]."\n",10000);
            }
        }
        apparaitreprogressivement("Choix :",30000);
        $choixsauvegarde=readline();
        popen('cls','w');
        //on vérifie si la sauvegarde existe
        if ($choixsauvegarde==1 || $choixsauvegarde==2 || $choixsauvegarde==3){
            apparaitreprogressivement("Lancement d'une nouvelle partie sur la sauvegarde ".$choixsauvegarde.". \n",30000);
            sleep(2);
            popen('cls','w');
            apparaitreprogressivement("Quel nom souhaitez-vous donner à votre personnage: ",30000);
            $nom= readline("");
            popen('cls','w');
            //Crée un personnage dans la base de données
            $Personnage= new Personnage($nom,100,10,5,[],["nom"=>"épée rouillée à une main","dégats"=>3]);
            $requete =chargementBase()->prepare("UPDATE sauvegarde SET nom =?, PV =?, PVMAX =?, PA =?, PD =?, Niveau =?, Exp =?, Salle =?, Argent= ? WHERE ID= ?");
            $requete->execute([$Personnage->getnom(),$Personnage->getPV(),$Personnage->getPVMax(),$Personnage->getPA(),$Personnage->getPD(),$Personnage->getlevel(), $Personnage->getexperience(),1,100,$choixsauvegarde]);
            $requete= chargementBase()->prepare("UPDATE arme SET nom=? Degats=? where IDSauvegarde=?");
            $requete->execute([$Personnage->getarme()["nom"],[$Personnage->getarme()["dégats"],$choixsauvegarde]]);
            //Le recharge.
            $requete = chargementBase()->prepare("SELECT * FROM Sauvegarde WHERE ID=?");
            $requete->execute([$choixsauvegarde]);
            $Personnage= $requete->fetch();
            apparaitreprogressivement("Bienvenue alors au donjon, ".$Personnage["nom"]." fais attention beaucoup sont morts dedans !",30000);
            sleep(2);
        }
        else{
            apparaitreprogressivement("Aucune sauvegarde choisie, retour au menu.",30000);
            sleep(2);
            popen('cls','w');
        }
    }
    else if($choix==3){
        apparaitreprogressivement("Au revoir jeune aventurier, on espère te revoir bientôt !\n",30000);
        sleep(2);
        popen('cls','w');
        die();
    }
    else{
        apparaitreprogressivement("Je n'ai pas compris votre demande. \n",30000);
        sleep(2);
    }
}

?>
